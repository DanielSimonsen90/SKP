import Component, { IComponent, Child } from '../Component';

type Login = { username: string, password: string };
interface Props {
    onLogin(login: Login): any
}
interface State {
    username: string;
    password: string;
}

export default class LoginForm extends Component<State, Props> {
    public onSubmit(): boolean {
        const login = { ...this.state };
        this.props.onLogin(login);
        return true;
    }

    render() {
        return document.createProperElement('div', {
            attributes: [['id', this.id], ...Object.keys(this.props).map(p => [p, this.props[p]] as [string, string])],
            children: [
                document.createProperElement('input', { attributes: [['type', 'text']], children: [''] }),
                document.createProperElement('input', { attributes: [['type', 'password']], children: [''] }),
                document.createProperElement('button', { events: [{ name: 'click', handlers: [() => this.onSubmit()] }] })
            ]
        })
    }
}

const loginForm = new Component<State, Props>('test', {
    onLogin(login) {
        console.log(login);
    }
}, [

])