import { EventEmitter } from 'DanhoLibraryJS';
import { 
    ComponentEventTypes as ComponentTypes,
    ComponentEventHandlers as ComponentHandlers,
    ComponentEventReturns as ComponentReturns,

    DOMEventTypes as DOMTypes,
    DOMEventHandler as DOMHandler
} from './ComponentEvents'

export default class ComponentEventEmitter extends EventEmitter {
    public componentOn<Event extends ComponentTypes>(event: Event, listener: (...args: ComponentHandlers[Event]) => ComponentReturns[Event]) {
        return this.on(event, listener);
    }
    public componentOnce<Event extends ComponentTypes>(event: Event, listener: (...args: ComponentHandlers[Event]) => ComponentReturns[Event]) {
        return this.once(event, listener);
    }
    public componentOff<Event extends ComponentTypes>(event: Event, listener: (...args: ComponentHandlers[Event]) => ComponentReturns[Event]) {
        return this.off(event, listener);
    }
    public componentEmit<Event extends ComponentTypes>(event: Event, ...args: ComponentHandlers[Event]) {
        return this.emit(event, ...args) as Array<ComponentReturns[Event]>;
    }

    public elementOn<Event extends DOMTypes>(event: Event, listener: (self: this, e: DOMHandler[Event]) => this) {
        return this.on(event, listener);
    }
    public elementOnce<Event extends DOMTypes>(event: Event, listener: (self: this, e: DOMHandler[Event]) => this) {
        return this.once(event, listener);
    }
    public elementOff<Event extends DOMTypes>(event: Event, listener: (self: this, e: DOMHandler[Event]) => this) {
        return this.off(event, listener);
    }
    public elementEmit<Event extends DOMTypes>(event: Event, e: DOMHandler[Event]) {
        this.emit(event, this, e);
        return this;
    }
}